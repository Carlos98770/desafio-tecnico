name: CI/CD - Staging e Produ√ß√£o (com Acionamento Manual)

on:
  push:
    branches: ["main", "develop"] 
  pull_request:
    branches: ["main", "develop"]
  
  workflow_dispatch: # ‚¨ÖÔ∏è Permite rodar o pipeline manualmente

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      # --- ETAPAS DE TESTE E BUILD (Sem mudan√ßas) ---
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Instalar Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Instalar depend√™ncias
        run: poetry install 

      - name: Esperar banco de dados
        run: |
          echo "Aguardando PostgreSQL..."
          until nc -z localhost 5432; do sleep 2; done
        
      - name: Rodar Black (verifica√ß√£o)
        run: poetry run black .

      - name: Rodar Lint
        run: poetry run flake8 . --max-line-length=100 --ignore=E203,W503

      - name: Rodar Testes
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          poetry run python manage.py migrate
          poetry run python manage.py test api

      - name: Definir tag da imagem (Commit SHA)
        id: docker_meta
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          echo "IMAGE_TAG=${COMMIT_SHA}" >> $GITHUB_ENV

      - name: Build da imagem Docker
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "Construindo imagem com tag: $IMAGE_TAG"
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/django-api:$IMAGE_TAG .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/django-api:$IMAGE_TAG ${{ secrets.DOCKERHUB_USERNAME }}/django-api:latest

      - name: Login no DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Enviar imagem para DockerHub
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/django-api:$IMAGE_TAG
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/django-api:latest

      # --- üöÄ DEPLOY DE STAGING ---
      - name: Deploy na AWS EC2 (Staging)
        if: github.ref == 'refs/heads/develop' # ‚¨ÖÔ∏è S√ì RODA NA BRANCH 'develop'
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            APP_DIR=~/app_staging # ‚¨ÖÔ∏è Define o diret√≥rio de Staging
            cd $APP_DIR # ‚¨ÖÔ∏è Entra no diret√≥rio que VOC√ä criou
            
            echo "Iniciando deploy de STAGING da tag: ${{ env.IMAGE_TAG }}"
            
            # 1. (REMOVIDO) O comando que criava o .env
            # 2. (REMOVIDO) O comando que criava o docker-compose.yaml
            
            # 3. üõ°Ô∏è Atualiza o docker-compose.yaml EXISTENTE
            echo "Atualizando a tag da imagem no docker-compose.yaml..."
            sed -i "s|image: ${{ secrets.DOCKERHUB_USERNAME }}/django-api:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/django-api:${{ env.IMAGE_TAG }}|g" docker-compose.yaml

            echo "Baixando a nova imagem..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/django-api:${{ env.IMAGE_TAG }}
            
            echo "Subindo os servi√ßos..."
            docker-compose up -d --remove-orphans
            
            echo "Limpando imagens antigas..."
            docker image prune -a -f
            
            echo "‚úÖ Deploy de STAGING conclu√≠do!"

      # --- üöÄ DEPLOY DE PRODU√á√ÉO ---
      - name: Deploy na AWS EC2 (Produ√ß√£o)
        if: github.ref == 'refs/heads/main' # ‚¨ÖÔ∏è S√ì RODA NA BRANCH 'main'
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            APP_DIR=~/app_prod # ‚¨ÖÔ∏è Define o diret√≥rio de Produ√ß√£o
            cd $APP_DIR # ‚¨ÖÔ∏è Entra no diret√≥rio que VOC√ä criou
            
            echo "Iniciando deploy de PRODU√á√ÉO da tag: ${{ env.IMAGE_TAG }}"

            # 1. (REMOVIDO) O comando que criava o .env
            # 2. (REMOVIDO) O comando que criava o docker-compose.yaml

            # 3. üõ°Ô∏è Atualiza o docker-compose.yaml EXISTENTE
            echo "Atualizando a tag da imagem no docker-compose.yaml..."
            sed -i "s|image: ${{ secrets.DOCKERHUB_USERNAME }}/django-api:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/django-api:${{ env.IMAGE_TAG }}|g" docker-compose.yaml
            
            echo "Baixando a nova imagem..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/django-api:${{ env.IMAGE_TAG }}
            
            echo "Subindo os servi√ßos..."
            docker-compose up -d --remove-orphans

            echo "Limpando imagens antigas..."
            docker image prune -a -f
            
            echo "‚úÖ Deploy de PRODU√á√ÉO conclu√≠do!"